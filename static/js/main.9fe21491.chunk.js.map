{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","useState","chosenPage","setChosenPage","useEffect","totalTabs","Math","ceil","className","cn","disabled","href","onClick","prevPage","map","item","active","selectPageOnTab","nextPage","App","itemsOnPage","setItemsOnPage","initialPage","setInitialPage","maxItems","startVisibleItems","endVisibleItems","id","value","onChange","event","target","htmlFor","page","slice","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCIIG,EAAwB,SAAC,GAK/B,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEA,EAAoCC,mBAASF,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACRD,EAAcJ,KACb,CAACD,IAEJM,qBAAU,WACRJ,EAAaE,KACZ,CAACA,IAEJ,IAAMG,EAAYC,KAAKC,KAAKV,EAAQC,GAkBpC,OACE,qBAAIU,UAAU,aAAd,UACE,oBACEA,UAAWC,IAAG,YAAa,CACzBC,SAAyB,IAAfR,IAFd,SAKE,mBACE,UAAQ,WACRM,UAAU,YACVG,KAAK,QACL,gBAA8B,IAAfT,EAAmB,OAAS,QAC3CU,QA5Be,WACjBb,IAAgBG,GAClBC,GAAc,SAACU,GAAD,OAAcA,EAAW,MAqBrC,oBAUDvB,EAAWS,EAAaM,GAAWS,KAAI,SAACC,GAAD,OACtC,oBACEP,UAAWC,IAAG,YAAa,CACzBO,OAAQd,IAAea,IAF3B,SAME,mBACE,UAAQ,WACRP,UAAU,YACVG,KAAI,WAAMI,GACVH,QAAS,kBAhCK,SAACG,GACvBZ,EAAcY,GA+BSE,CAAgBF,IAJjC,SAMGA,KAREA,MAYT,oBACEP,UAAWC,IAAG,YAAa,CACzBC,SAAUR,IAAeG,IAF7B,SAKE,mBACE,UAAQ,WACRG,UAAU,YACVG,KAAK,QACL,gBAAeT,IAAeG,EAAY,OAAS,QACnDO,QAtDe,WACjBV,IAAeG,GACjBF,GAAc,SAACe,GAAD,OAAcA,EAAW,MA+CrC,wBC/EKC,EAAgB,WAC3B,IAGA,EAAsClB,mBAAS,GAA/C,mBAAOmB,EAAP,KAAoBC,EAApB,KACA,EAAsCpB,mBAHpB,GAGlB,mBAAOqB,EAAP,KAAoBC,EAApB,KAEMC,EAAWF,EAAcF,EACzBK,EAAoBD,EAAWJ,EAC/BM,EAAkBF,EARL,MAQ0CA,EAU7D,OACE,sBAAKhB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWc,EADX,mBAEIG,EAAoB,EAFxB,cAGQC,EAHR,eAtBe,GAsBf,OAMA,sBAAKlB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRmB,GAAG,kBACHnB,UAAU,eACVoB,MAAOR,EACPS,SAzBY,SAACC,GACrBT,GAAgBS,EAAMC,OAAOH,QAmBvB,UAOE,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOI,QAAQ,kBAAkBxB,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEX,MAlDa,GAmDbC,QAASsB,EACTrB,YAnDY,EAoDZC,aAvCc,SAACiC,GACnBV,EAAeU,MAyCb,6BACG3C,EAxDW,EADC,IA0DVwB,KAAI,SAACC,GAAD,OACH,oBAAI,UAAQ,OAAZ,wBACWA,IADaA,MAIzBmB,MAAMT,EAAmBC,SClEpCS,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.9fe21491.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import { FC, useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { getNumbers } from '../../utils';\n\ninterface Props {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n}\n\nexport const Pagination: FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const [chosenPage, setChosenPage] = useState(currentPage);\n\n  useEffect(() => {\n    setChosenPage(currentPage);\n  }, [perPage]);\n\n  useEffect(() => {\n    onPageChange(chosenPage);\n  }, [chosenPage]);\n\n  const totalTabs = Math.ceil(total / perPage);\n\n  const selectPrevPage = () => {\n    if (currentPage !== chosenPage) {\n      setChosenPage((prevPage) => prevPage - 1);\n    }\n  };\n\n  const selectNextPage = () => {\n    if (chosenPage !== totalTabs) {\n      setChosenPage((nextPage) => nextPage + 1);\n    }\n  };\n\n  const selectPageOnTab = (item: number) => {\n    setChosenPage(item);\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li\n        className={cn('page-item', {\n          disabled: chosenPage === 1,\n        })}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={chosenPage === 1 ? 'true' : 'false'}\n          onClick={selectPrevPage}\n        >\n          «\n        </a>\n      </li>\n      {getNumbers(currentPage, totalTabs).map((item) => (\n        <li\n          className={cn('page-item', {\n            active: chosenPage === item,\n          })}\n          key={item}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${item}`}\n            onClick={() => selectPageOnTab(item)}\n          >\n            {item}\n          </a>\n        </li>\n      ))}\n      <li\n        className={cn('page-item', {\n          disabled: chosenPage === totalTabs,\n        })}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={chosenPage === totalTabs ? 'true' : 'false'}\n          onClick={selectNextPage}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { ChangeEvent, useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nexport const App: React.FC = () => {\n  const totalItems = 42;\n  const firstPage = 1;\n\n  const [itemsOnPage, setItemsOnPage] = useState(5);\n  const [initialPage, setInitialPage] = useState(firstPage);\n\n  const maxItems = initialPage * itemsOnPage;\n  const startVisibleItems = maxItems - itemsOnPage;\n  const endVisibleItems = maxItems > totalItems ? totalItems : maxItems;\n\n  const selectedItems = (event: ChangeEvent<HTMLSelectElement>) => {\n    setItemsOnPage(+event.target.value);\n  };\n\n  const changedPage = (page: number) => {\n    setInitialPage(page);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${initialPage} (items ${\n          startVisibleItems + 1\n        } - ${endVisibleItems} of ${totalItems})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={itemsOnPage}\n            onChange={selectedItems}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={totalItems}\n        perPage={itemsOnPage}\n        currentPage={firstPage}\n        onPageChange={changedPage}\n      />\n\n      <ul>\n        {getNumbers(firstPage, totalItems)\n          .map((item) => (\n            <li data-cy=\"item\" key={item}>\n              {`Item ${item}`}\n            </li>\n          ))\n          .slice(startVisibleItems, endVisibleItems)}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}